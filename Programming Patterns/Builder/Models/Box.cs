using Programming_Patterns.Builder.Contracts;
using Programming_Patterns.Builder.Enums;
using Programming_Patterns.Shared;

namespace Programming_Patterns.Builder.Models
{
    public class Box : IMailContainer
    {
        private decimal DimensionBase { get; set; }
        private decimal DimensionFront { get; set; }
        private decimal DimensionPile { get; set; }

        private string _allDimensions { get; set; } = "0x0x0";

        [Printable(label: "Dimensions")]
        public string AllDimensions
        {
            get { return _allDimensions; }
            private set { _allDimensions = value; }
        }

        private decimal _WeightOfContents;
        public decimal WeightOfContents
        {
            get => _WeightOfContents;
            set
            {
                decimal parsedValue = (decimal)Math.Ceiling(value);
                _WeightOfContents = parsedValue;
                this.CalculateVolume();
                this.CalculateWeight();
            }
        }

        private decimal _weightOfBox;

        [Printable(label: "Weight", unit: "g.")]
        public decimal WeightOfBox
        {
            get { return GetWeight(); }
            private set { CalculateWeight(); }
        }

        private decimal _volumeOfBox;

        [Printable(label: "Volume", unit: "cm3")]
        public decimal VolumeOfBox
        {
            get { return GetVolume(); }
            set { CalculateVolume(); }
        }

        [Printable("Size")]
        public BoxSize Size { get; set; }

        private const decimal WeightDifference = 0.1m;

        private const decimal PHI_RATIO = 1.61803398875m;

        public Box(BoxSize size)
        {
            Size = size;
            this.DimensionBase = (int)Size;
            this.AllDimensions = SetDimensions();
        }

        private string SetDimensions()
        {
            DimensionFront = RoundDecimal(DimensionBase * PHI_RATIO);
            DimensionPile = RoundDecimal(DimensionBase / PHI_RATIO);
            return $"{DimensionBase} x {DimensionFront} x {DimensionPile}";
        }

        private static decimal RoundDecimal(decimal calculated) => Math.Round(calculated, 2);

        private void CalculateWeight()
        {
            _weightOfBox = this.WeightOfContents + WeightDifference;
        }

        private void CalculateVolume()
        {
            _volumeOfBox = this.DimensionBase * this.DimensionFront * this.DimensionPile;
        }

        public decimal GetVolume()
        {
            return _volumeOfBox;
        }

        public decimal GetWeight()
        {
            return _weightOfBox;
        }

        public override string ToString() =>
            new DataClassPrinter<Box>(this, "Box").AutoGenerateDescription();
    }
}
